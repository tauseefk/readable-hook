{"version":3,"file":"index.js","sources":["../src/useStreamingQuery.tsx"],"sourcesContent":["import { useCallback, useState } from 'react';\n\nconst readableTextStream = async (\n  path: string,\n  options?: {\n    method: 'GET' | 'POST';\n    body?: any;\n    headers?: Record<string, string>;\n  },\n) => {\n  const response = await fetch(path, options);\n  if (!response.body) throw new Error('No response body found.');\n\n  return response.body.pipeThrough(new TextDecoderStream());\n};\n\n/**\n * Fetch state from a streaming endpoint\n * @param path endpoint to fetch the response from\n * @returns {[string, () => void]} returns a tuple of data retrieved from the stream, and a query trigger function\n */\nexport const useStreamingQuery = (path: string): [string, () => void] => {\n  const [data, setData] = useState('');\n\n  const streamQuery = useCallback(async () => {\n    let animationFrameId: number | null = null;\n    const response = await readableTextStream(path);\n    if (!response) return;\n\n    const reader = response.getReader();\n    async function syncWithTextStream() {\n      const { value, done } = await reader.read();\n      if (!done) {\n        setData(value);\n\n        animationFrameId = requestAnimationFrame(async () => {\n          await syncWithTextStream();\n        });\n        return;\n      }\n\n      if (animationFrameId) cancelAnimationFrame(animationFrameId);\n    }\n\n    syncWithTextStream();\n  }, [path]);\n\n  return [data, streamQuery];\n};\n\n/**\n * Trigger a mutation at a streaming endpoint\n * @param path to the endpoint endpoint\n * @param staticParams parameters that can be passed at hook initialization\n * @returns {[string, (dynamicParams?: Record<string, string>) => void]} returns a tuple of data retrieved from the stream, and a mutation trigger function\n */\nexport const useStreamingMutation = (\n  path: string,\n  staticParams?: Record<string, string>,\n): [string, (dynamicParams?: Record<string, string>) => void] => {\n  const [data, setData] = useState('');\n\n  const streamMutation = useCallback(\n    async (dynamicParams?: Record<string, string>) => {\n      const response = await readableTextStream(path, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ ...staticParams, ...dynamicParams }),\n      });\n      if (!response) return;\n\n      const reader = response.getReader();\n      async function syncWithTextStream() {\n        const { value, done } = await reader.read();\n        if (!done) {\n          setData(value);\n\n          requestAnimationFrame(async () => {\n            await syncWithTextStream();\n          });\n        }\n      }\n\n      await syncWithTextStream();\n    },\n    [path, staticParams],\n  );\n\n  return [data, streamMutation];\n};\n"],"names":["useState","useCallback"],"mappings":"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"}