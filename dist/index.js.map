{"version":3,"file":"index.js","sources":["../src/utils/useThrottledCallback.tsx","../src/constants.ts","../src/useReadable.tsx","../src/utils/readableTextStream.ts","../src/useStreamingQuery.tsx","../src/useStreamingMutation.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// This utility heavily borrows from react-hookz/useThrottledCallback,\n// The goal was to ensure no dependencies.\n// https://github.com/react-hookz/web/blob/master/src/useValidator/index.ts\n\n// MIT License\n\n// Copyright (c) 2021 react-hookz\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport { DependencyList, useRef, useEffect, useMemo } from 'react';\n\nexport interface ThrottledFunction<Fn extends (...args: any[]) => any> {\n  (...args: Parameters<Fn>): void;\n}\n\nexport const useThrottledCallback = <Fn extends (...args: any[]) => void>(\n  cb: Fn,\n  deps: DependencyList,\n  ms = 500,\n): ThrottledFunction<Fn> => {\n  const timeout = useRef<ReturnType<typeof setTimeout>>();\n  const cachedArgs = useRef<Parameters<Fn>>();\n\n  useEffect(() => {\n    const currentTimeout = timeout.current;\n    return () => {\n      if (currentTimeout) {\n        clearTimeout(currentTimeout);\n        timeout.current = undefined;\n      }\n    };\n  }, []);\n\n  return useMemo(() => {\n    const execCbAndSchedule = (args: Parameters<Fn>) => {\n      cachedArgs.current = undefined;\n      cb(...args);\n\n      timeout.current = setTimeout(() => {\n        timeout.current = undefined;\n\n        if (cachedArgs.current) {\n          execCbAndSchedule(cachedArgs.current);\n\n          cachedArgs.current = undefined;\n        }\n      }, ms);\n    };\n\n    const throttledCb = (...args: Parameters<Fn>) => {\n      // execute immediately\n      if (!timeout.current) {\n        execCbAndSchedule(args);\n        return;\n      }\n\n      // cache arguments to be picked up by the next scheduled execution\n      cachedArgs.current = args;\n    };\n\n    return throttledCb;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cb, ms, ...deps]);\n};\n","export type PrimitiveParam = string | boolean | number;\n\nexport interface UseReadableHookData {\n  value: string;\n  isStreaming: boolean;\n}\n\nexport const DEFAULT_STREAM_DATA: UseReadableHookData = {\n  value: '',\n  isStreaming: false,\n};\n","import { useCallback, useState, useRef } from 'react';\nimport { useThrottledCallback } from './utils/useThrottledCallback';\nimport {\n  DEFAULT_STREAM_DATA,\n  PrimitiveParam,\n  UseReadableHookData,\n} from './constants';\n\n/**\n * Synchronize React state with a ReadableStream.\n * @param {ReadableStream<String>} streamProducer\n *  readable stream to synchronize with state\n * @param {number} delay\n *  time interval between each stream read call\n * @returns a tuple of data retrieved from the stream\n *  and a mutation trigger function\n */\nexport const useReadable = (\n  streamProducer: (\n    params?: Record<string, PrimitiveParam>,\n  ) => Promise<ReadableStream<string>>,\n  { delay, accumulate }: { delay?: number; accumulate?: boolean } = {\n    delay: 500,\n    accumulate: false,\n  },\n): [\n  UseReadableHookData,\n  (options?: {\n    params?: Record<string, PrimitiveParam>;\n    onDone?: () => void;\n  }) => Promise<void>,\n] => {\n  const frequentlyUpdatedData = useRef(DEFAULT_STREAM_DATA);\n  const [{ value, isStreaming }, setData] = useState<UseReadableHookData>(\n    frequentlyUpdatedData.current,\n  );\n\n  const throttledUpdateState = useThrottledCallback(\n    () => {\n      setData({\n        ...frequentlyUpdatedData.current,\n      });\n    },\n    [],\n    delay,\n  );\n\n  const synchronize = useCallback(\n    async (options?: {\n      params?: Record<string, PrimitiveParam>;\n      onDone?: () => void;\n    }) => {\n      // flush state\n      frequentlyUpdatedData.current = DEFAULT_STREAM_DATA;\n\n      const response = await streamProducer(options?.params);\n      if (!response) throw new Error('No response from stream.');\n\n      const reader = response.getReader();\n\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        const { value, done } = await reader.read();\n\n        if (done) break;\n\n        frequentlyUpdatedData.current = {\n          isStreaming: true,\n          value: accumulate\n            ? `${frequentlyUpdatedData.current.value}${value}`\n            : value,\n        };\n\n        throttledUpdateState();\n      }\n\n      frequentlyUpdatedData.current = {\n        ...frequentlyUpdatedData.current,\n        isStreaming: false,\n      };\n\n      throttledUpdateState();\n      options?.onDone?.();\n    },\n    [accumulate, streamProducer, throttledUpdateState],\n  );\n\n  return [{ value, isStreaming }, synchronize];\n};\n","export const readableTextStream = async (\n  path: string,\n  options?: {\n    method: 'GET' | 'POST';\n    mode?: 'cors' | 'no-cors' | 'same-origin';\n    body?: string;\n    headers?: Record<string, string>;\n  },\n) => {\n  const response = await fetch(path, options);\n  if (!response.body) throw new Error('No response body found.');\n\n  return response.body.pipeThrough(new TextDecoderStream());\n};\n","import { PrimitiveParam } from './constants';\nimport { useReadable } from './useReadable';\nimport { readableTextStream } from './utils/readableTextStream';\n\nexport const useStreamingQuery = (\n  path: string,\n  delay = 500,\n): [\n  { value: string; isStreaming: boolean },\n  (options?: {\n    params?: Record<string, PrimitiveParam>;\n    onDone?: (value?: string) => void;\n  }) => Promise<void>,\n] =>\n  useReadable(\n    () =>\n      readableTextStream(path, {\n        method: 'GET',\n      }),\n    delay,\n  );\n","import { PrimitiveParam } from './constants';\nimport { readableTextStream } from './utils/readableTextStream';\nimport { useReadable } from './useReadable';\n\nexport const useStreamingMutation = (\n  path: string,\n  staticParams?: Record<string, PrimitiveParam>,\n  options?: {\n    accumulate?: boolean;\n    delay?: number;\n  },\n): [\n  { value: string; isStreaming: boolean },\n  (options?: {\n    params?: Record<string, PrimitiveParam>;\n    onDone?: (value?: string) => void;\n  }) => Promise<void>,\n] =>\n  useReadable(\n    (params?: Record<string, PrimitiveParam>) =>\n      readableTextStream(path, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...staticParams,\n          ...params,\n        }),\n      }),\n    options,\n  );\n"],"names":["useRef","useEffect","useMemo","useState","useCallback"],"mappings":"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"}