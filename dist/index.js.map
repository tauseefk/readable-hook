{"version":3,"file":"index.js","sources":["../src/utils/useThrottledCallback.tsx","../src/useStreamingQuery.tsx"],"sourcesContent":["import { DependencyList, useRef, useEffect, useMemo } from \"react\";\n\nexport interface ThrottledFunction<Fn extends (...args: any[]) => any> {\n  (this: ThisParameterType<Fn>, ...args: Parameters<Fn>): void;\n}\nexport const useThrottledCallback = <Fn extends (...args: any[]) => void>(\n  cb: Fn,\n  deps: DependencyList,\n  ms = 500,\n): ThrottledFunction<Fn> => {\n  const timeout = useRef<ReturnType<typeof setTimeout>>();\n  const cachedArgs = useRef<Parameters<Fn>>();\n\n  useEffect(() => {\n    const currentTimeout = timeout.current;\n    return () => {\n      if (currentTimeout) {\n        clearTimeout(currentTimeout);\n        timeout.current = undefined;\n      }\n    };\n  }, []);\n\n  return useMemo(() => {\n    const execCbAndSchedule = (args: Parameters<Fn>) => {\n      cachedArgs.current = undefined;\n      cb(args);\n\n      timeout.current = setTimeout(() => {\n        timeout.current = undefined;\n\n        if (cachedArgs.current) {\n          execCbAndSchedule(cachedArgs.current);\n\n          cachedArgs.current = undefined;\n        }\n      }, ms);\n    };\n\n    const throttledCb = (...args: Parameters<Fn>) => {\n      // execute immediately\n      if (!timeout.current) {\n        execCbAndSchedule(args);\n        return;\n      }\n\n      // cache arguments to be picked up by the next scheduled execution\n      cachedArgs.current = args;\n    };\n\n    return throttledCb;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cb, ms, ...deps]);\n};","import { useCallback, useRef, useState } from 'react';\nimport { useThrottledCallback } from './utils/useThrottledCallback';\n\nconst readableTextStream = async (\n  path: string,\n  options?: {\n    method: 'GET' | 'POST';\n    body?: any;\n    headers?: Record<string, string>;\n  },\n) => {\n  const response = await fetch(path, options);\n  if (!response.body) throw new Error('No response body found.');\n\n  return response.body.pipeThrough(new TextDecoderStream());\n};\n\n/**\n * Fetch state from a streaming endpoint\n * @param path endpoint to fetch the response from\n * @returns {[string, () => void]} returns a tuple of data retrieved from the stream, and a query trigger function\n */\nexport const useStreamingQuery = (path: string): [string, () => void] => {\n  const [data, setData] = useState('');\n\n  const streamQuery = useCallback(async () => {\n    let animationFrameId: number | null = null;\n    const response = await readableTextStream(path);\n    if (!response) return;\n\n    const reader = response.getReader();\n    async function syncWithTextStream() {\n      const { value, done } = await reader.read();\n      if (!done) {\n        setData(value);\n\n        animationFrameId = requestAnimationFrame(async () => {\n          await syncWithTextStream();\n        });\n        return;\n      }\n\n      if (animationFrameId) cancelAnimationFrame(animationFrameId);\n    }\n\n    syncWithTextStream();\n  }, [path]);\n\n  return [data, streamQuery];\n};\n\nconst DEFAULT_STREAM_DATA: UseStreamingMutationData = { value: '', done: false, isStreaming: false };\ninterface UseStreamingMutationData { value: string, done: boolean, isStreaming: boolean }\ntype PrimitiveParam = string | boolean | number;\n\n/**\n * Trigger a mutation at a streaming endpoint\n * @param path streaming endpoint\n * @param staticParams params passed during hook initialization\n * @param delay time interval between each stream read call\n * @returns {[UseStreamingMutationData, (dynamicParams?: Record<string, PrimitiveParam>) => void]} returns a tuple of data retrieved from the stream, and a mutation trigger function\n */\nexport const useStreamingMutation = (\n  path: string,\n  staticParams: Record<string, PrimitiveParam>,\n  delay = 500,\n): [\n    { value: string; done: boolean; isStreaming: boolean },\n    (\n      dynamicParams?: Record<string, PrimitiveParam>,\n      onDone?: (value?: string) => void,\n    ) => Promise<void>,\n  ] => {\n  const frequentlyUpdatedData = useRef(DEFAULT_STREAM_DATA);\n  const [{ value, done, isStreaming }, setThrottledData] = useState(\n    frequentlyUpdatedData.current,\n  );\n\n  const throttledUpdateState = useThrottledCallback(\n    () => {\n      setThrottledData({ ...frequentlyUpdatedData.current });\n    },\n    [],\n    delay\n  );\n\n  const streamMutation = useCallback(\n    async (\n      dynamicParams?: Record<string, PrimitiveParam>,\n      onDone?: (value?: string) => void,\n    ) => {\n      frequentlyUpdatedData.current = DEFAULT_STREAM_DATA;\n\n      const response = await readableTextStream(path, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ ...staticParams, ...dynamicParams }),\n      });\n      if (!response) throw new Error('No response from stream.');\n\n      const reader = response.getReader();\n\n      async function syncWithTextStream() {\n        const { value, done } = await reader.read();\n        if (!done) {\n          frequentlyUpdatedData.current = { value, done, isStreaming: true };\n          throttledUpdateState();\n\n          requestAnimationFrame(async () => {\n            await syncWithTextStream();\n          });\n          return;\n        }\n\n        frequentlyUpdatedData.current = {\n          ...frequentlyUpdatedData.current,\n          done: true,\n          isStreaming: false,\n        };\n        throttledUpdateState();\n        if (onDone) onDone(frequentlyUpdatedData.current.value);\n      }\n\n      await syncWithTextStream();\n    },\n    [path, staticParams, throttledUpdateState],\n  );\n\n  return [{ value, done, isStreaming }, streamMutation];\n};\n"],"names":["useRef","useEffect","useMemo","useState","useCallback"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKO,IAAM,oBAAoB,GAAG,UAClC,EAAM,EACN,IAAoB,EACpB,EAAQ,EAAA;AAAR,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,EAAA,EAAA,EAAQ,GAAA,GAAA,CAAA,EAAA;AAER,IAAA,IAAM,OAAO,GAAGA,YAAM,EAAiC,CAAC;AACxD,IAAA,IAAM,UAAU,GAAGA,YAAM,EAAkB,CAAC;AAE5C,IAAAC,eAAS,CAAC,YAAA;AACR,QAAA,IAAM,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC;QACvC,OAAO,YAAA;AACL,YAAA,IAAI,cAAc,EAAE;gBAClB,YAAY,CAAC,cAAc,CAAC,CAAC;AAC7B,gBAAA,OAAO,CAAC,OAAO,GAAG,SAAS,CAAC;AAC7B,aAAA;AACH,SAAC,CAAC;KACH,EAAE,EAAE,CAAC,CAAC;AAEP,IAAA,OAAOC,aAAO,CAAC,YAAA;QACb,IAAM,iBAAiB,GAAG,UAAC,IAAoB,EAAA;AAC7C,YAAA,UAAU,CAAC,OAAO,GAAG,SAAS,CAAC;YAC/B,EAAE,CAAC,IAAI,CAAC,CAAC;AAET,YAAA,OAAO,CAAC,OAAO,GAAG,UAAU,CAAC,YAAA;AAC3B,gBAAA,OAAO,CAAC,OAAO,GAAG,SAAS,CAAC;gBAE5B,IAAI,UAAU,CAAC,OAAO,EAAE;AACtB,oBAAA,iBAAiB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AAEtC,oBAAA,UAAU,CAAC,OAAO,GAAG,SAAS,CAAC;AAChC,iBAAA;aACF,EAAE,EAAE,CAAC,CAAC;AACT,SAAC,CAAC;AAEF,QAAA,IAAM,WAAW,GAAG,YAAA;YAAC,IAAuB,IAAA,GAAA,EAAA,CAAA;iBAAvB,IAAuB,EAAA,GAAA,CAAA,EAAvB,EAAuB,GAAA,SAAA,CAAA,MAAA,EAAvB,EAAuB,EAAA,EAAA;gBAAvB,IAAuB,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;;AAE1C,YAAA,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;gBACpB,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBACxB,OAAO;AACR,aAAA;;AAGD,YAAA,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC;AAC5B,SAAC,CAAC;AAEF,QAAA,OAAO,WAAW,CAAC;;AAErB,KAAC,iBAAG,EAAE,EAAE,EAAE,CAAK,EAAA,IAAI,QAAE,CAAC;AACxB,CAAC;;AClDD,IAAM,kBAAkB,GAAG,UACzB,IAAY,EACZ,OAIC,EAAA,EAAA,OAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;AAEgB,YAAA,KAAA,CAAA,EAAA,OAAA,CAAA,CAAA,YAAM,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA,CAAA;;AAArC,gBAAA,QAAQ,GAAG,EAA0B,CAAA,IAAA,EAAA,CAAA;gBAC3C,IAAI,CAAC,QAAQ,CAAC,IAAI;AAAE,oBAAA,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;gBAE/D,OAAO,CAAA,CAAA,aAAA,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,iBAAiB,EAAE,CAAC,CAAC,CAAA;;;KAC3D,CAAC;AAEF;;;;AAIG;AACI,IAAM,iBAAiB,GAAG,UAAC,IAAY,EAAA;IACtC,IAAA,EAAA,GAAkBC,cAAQ,CAAC,EAAE,CAAC,EAA7B,IAAI,GAAA,EAAA,CAAA,CAAA,CAAA,EAAE,OAAO,GAAA,EAAA,CAAA,CAAA,CAAgB,CAAC;IAErC,IAAM,WAAW,GAAGC,iBAAW,CAAC,YAAA,EAAA,OAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;AAM9B,QAAA,SAAe,kBAAkB,GAAA;;;;;;AACP,wBAAA,KAAA,CAAA,EAAA,OAAA,CAAA,CAAA,YAAM,MAAM,CAAC,IAAI,EAAE,CAAA,CAAA;;AAArC,4BAAA,EAAA,GAAkB,SAAmB,EAAnC,KAAK,GAAA,EAAA,CAAA,KAAA,EAAE,IAAI,GAAA,EAAA,CAAA,IAAA,CAAA;4BACnB,IAAI,CAAC,IAAI,EAAE;gCACT,OAAO,CAAC,KAAK,CAAC,CAAC;gCAEf,gBAAgB,GAAG,qBAAqB,CAAC,YAAA,EAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;oDACvC,OAAM,CAAA,CAAA,YAAA,kBAAkB,EAAE,CAAA,CAAA;;AAA1B,gDAAA,EAAA,CAAA,IAAA,EAA0B,CAAC;;;;AAC5B,iCAAA,CAAA,CAAA,EAAA,CAAC,CAAC;gCACH,OAAO,CAAA,CAAA,YAAA,CAAA;AACR,6BAAA;AAED,4BAAA,IAAI,gBAAgB;gCAAE,oBAAoB,CAAC,gBAAgB,CAAC,CAAC;;;;;AAC9D,SAAA;;;;;oBAjBG,gBAAgB,GAAkB,IAAI,CAAC;AAC1B,oBAAA,OAAA,CAAA,CAAA,YAAM,kBAAkB,CAAC,IAAI,CAAC,CAAA,CAAA;;AAAzC,oBAAA,QAAQ,GAAG,EAA8B,CAAA,IAAA,EAAA,CAAA;AAC/C,oBAAA,IAAI,CAAC,QAAQ;wBAAE,OAAO,CAAA,CAAA,YAAA,CAAA;AAEhB,oBAAA,MAAM,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;AAepC,oBAAA,kBAAkB,EAAE,CAAC;;;;AACtB,KAAA,CAAA,CAAA,EAAA,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;AAEX,IAAA,OAAO,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AAC7B,EAAE;AAEF,IAAM,mBAAmB,GAA6B,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC;AAIrG;;;;;;AAMG;IACU,oBAAoB,GAAG,UAClC,IAAY,EACZ,YAA4C,EAC5C,KAAW,EAAA;AAAX,IAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,EAAA,KAAW,GAAA,GAAA,CAAA,EAAA;AAQX,IAAA,IAAM,qBAAqB,GAAGJ,YAAM,CAAC,mBAAmB,CAAC,CAAC;IACpD,IAAA,EAAA,GAAmDG,cAAQ,CAC/D,qBAAqB,CAAC,OAAO,CAC9B,EAFM,EAA4B,GAAA,EAAA,CAAA,CAAA,CAAA,EAA1B,KAAK,GAAA,EAAA,CAAA,KAAA,EAAE,IAAI,GAAA,EAAA,CAAA,IAAA,EAAE,WAAW,GAAA,EAAA,CAAA,WAAA,EAAI,gBAAgB,GAAA,EAAA,CAAA,CAAA,CAEpD,CAAC;IAEF,IAAM,oBAAoB,GAAG,oBAAoB,CAC/C,YAAA;AACE,QAAA,gBAAgB,CAAM,QAAA,CAAA,EAAA,EAAA,qBAAqB,CAAC,OAAO,EAAG,CAAC;AACzD,KAAC,EACD,EAAE,EACF,KAAK,CACN,CAAC;AAEF,IAAA,IAAM,cAAc,GAAGC,iBAAW,CAChC,UACE,aAA8C,EAC9C,MAAiC,EAAA,EAAA,OAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;AAejC,QAAA,SAAe,kBAAkB,GAAA;;;;;;AACP,wBAAA,KAAA,CAAA,EAAA,OAAA,CAAA,CAAA,YAAM,MAAM,CAAC,IAAI,EAAE,CAAA,CAAA;;AAArC,4BAAA,EAAA,GAAkB,SAAmB,EAAnC,KAAK,GAAA,EAAA,CAAA,KAAA,EAAE,IAAI,GAAA,EAAA,CAAA,IAAA,CAAA;4BACnB,IAAI,CAAC,IAAI,EAAE;AACT,gCAAA,qBAAqB,CAAC,OAAO,GAAG,EAAE,KAAK,EAAA,KAAA,EAAE,IAAI,EAAA,IAAA,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;AACnE,gCAAA,oBAAoB,EAAE,CAAC;AAEvB,gCAAA,qBAAqB,CAAC,YAAA,EAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;oDACpB,OAAM,CAAA,CAAA,YAAA,kBAAkB,EAAE,CAAA,CAAA;;AAA1B,gDAAA,EAAA,CAAA,IAAA,EAA0B,CAAC;;;;AAC5B,iCAAA,CAAA,CAAA,EAAA,CAAC,CAAC;gCACH,OAAO,CAAA,CAAA,YAAA,CAAA;AACR,6BAAA;AAED,4BAAA,qBAAqB,CAAC,OAAO,GACxB,QAAA,CAAA,QAAA,CAAA,EAAA,EAAA,qBAAqB,CAAC,OAAO,CAAA,EAAA,EAChC,IAAI,EAAE,IAAI,EACV,WAAW,EAAE,KAAK,GACnB,CAAC;AACF,4BAAA,oBAAoB,EAAE,CAAC;AACvB,4BAAA,IAAI,MAAM;AAAE,gCAAA,MAAM,CAAC,qBAAqB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;;;;;AACzD,SAAA;;;;;AAhCD,oBAAA,qBAAqB,CAAC,OAAO,GAAG,mBAAmB,CAAC;oBAEnC,OAAM,CAAA,CAAA,YAAA,kBAAkB,CAAC,IAAI,EAAE;AAC9C,4BAAA,MAAM,EAAE,MAAM;AACd,4BAAA,OAAO,EAAE;AACP,gCAAA,cAAc,EAAE,kBAAkB;AACnC,6BAAA;4BACD,IAAI,EAAE,IAAI,CAAC,SAAS,uBAAM,YAAY,CAAA,EAAK,aAAa,CAAG,CAAA;AAC5D,yBAAA,CAAC,CAAA,CAAA;;AANI,oBAAA,QAAQ,GAAG,EAMf,CAAA,IAAA,EAAA,CAAA;AACF,oBAAA,IAAI,CAAC,QAAQ;AAAE,wBAAA,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;AAErD,oBAAA,MAAM,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;oBAuBpC,OAAM,CAAA,CAAA,YAAA,kBAAkB,EAAE,CAAA,CAAA;;AAA1B,oBAAA,EAAA,CAAA,IAAA,EAA0B,CAAC;;;;SAC5B,EACD,CAAC,IAAI,EAAE,YAAY,EAAE,oBAAoB,CAAC,CAC3C,CAAC;AAEF,IAAA,OAAO,CAAC,EAAE,KAAK,EAAA,KAAA,EAAE,IAAI,EAAA,IAAA,EAAE,WAAW,EAAA,WAAA,EAAE,EAAE,cAAc,CAAC,CAAC;AACxD;;;;;"}